x=rnorm(100)
y=rnorm(100)
plot(x,y)
plot(x,y,xlab="this is the x-axis",ylab="this is the y-axis",
main="Plot of X vs Y")
cor(x,y)
cor(y,x)
corr(y,x)
cor(y,x)
mean(y)
mean(x)
plot(x,y,col="green")
z=seq(-pi,pi,length=50)
plot(z)
list1 = [1,2]
list1 = ['1','2']
list1 = ('1','2')
list1 = ('1''2')
list1 = (12)
list1 = (12 32)
list1 = c(12 32)
list1 = c(12,32)
dim(possum) #gives rows x columns
library("DAAG")
library("lattice")
library("MASS")
?possum
dim(possum) #gives rows x columns
names(possum) #gives column names
(fossum["totlngth"])
hist(totlngth,breaks = 72.5 + (0:5)*5)
hist(totlngth, breaks = 72.5 + (0:5)*5, ylim = c(0,30), xlab = "total length (cm)", main = "A: breaks at 72.5, 77.5, ... ")
par(mfrow = c(1,4)) #Display window
attach(fossum)
hist(totlngth, breaks = 72.5 + (0:5)*5, ylim = c(0,30), xlab = "total length (cm)", main = "A: breaks at 72.5, 77.5, ... ")
hist(totlngth, breaks = 75 + (0:5)*5, ylim = c(0,22), xlab = "total length (cm)", main = "B: breaks at 75, 80, ... ")
detach("package:DAAG", unload=TRUE)
library("DAAG", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(ISLR)
install.packages('ISLR')
library('ISLR')
?Auto
autoData <- Auto
names(autoData)
plot.xy(autoData$cylinders,autoData$mpg)
?plot.xy(autoData$cylinders,autoData$mpg)
attach(autoData)
plot(cylinders, mpg, main="Scatterplot Example",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
plot(mpg,cylinders , main="Scatterplot Example",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
plot(cylinders, mpg, main="Scatterplot Example",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
plot(cylinders, mpg, main="Scatterplot Example",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=10)
plot(cylinders, mpg, main="Scatterplot Example",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
summary(autoData)
plot(cylinders, mpg, main="Cylinder vs MPG",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
plot(displacement, mpg, main="displacement vs MPG",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
plot(horsepower, mpg, main="horsepower vs MPG",
xlab="Cylinder", ylab="Miles Per Gallon ", pch=19)
cor(autoData)
cor(autoData[])
cor(autoData[,])
cor(autoData[:,:])
cor(autoData[:,1:4])
data(autoData)
cor(autoData[,1:4])
pairs(autoData[,1:4])
pairs(autoData[,1:8])
pairs(autoData[,1:7])
View(autoData)
View(autoData)
cor(autoData[,1:7])
amerAuto <- autoData$origin=1
amerAuto <- subset(autoData, origin == 1)
euroAuto <- subset(autoData, origin == 2)
japAuto <- subset(autoData, origin == 3)
pairs(autoData[,1:7])
pairs(eurData[,1:7])
cor(euroData[,1:7])
cor(euroData[,1:7])
cor(euroAuto[,1:7])
pairs(euroAuto[,1:7])
cor(amerAuto[,1:7])
pairs(amerAuto[,1:7])
cor(japAuto[,1:7])
pairs(japAuto[,1:7])
pairs(autoData[,1:7])
cor(autoData[,1:7])
cor(amerAuto[,1:7])
pairs(amerAuto[,1:7])
?xyplot
?xyplot()
library('ggplot')
library('lattice')
?xyplot()
?xyplot(horsepower ~ mpg )
xyplot(horsepower ~ mpg )
xyplot(horsepower ~ mpg, type = c("p", "smooth"), groups = origin )
xyplot(horsepower ~ mpg, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("a", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("b", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("c", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("d", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("f", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("z", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("l", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ displacement, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ weight, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ year, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=4) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = cylinders ,auto.key = list(columns=8) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = cylinders ,auto.key = list(columns=6) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = cylinders ,auto.key = list(columns=5) )
warning()
View(autoData)
View(autoData)
xyplot(mpg ~ horsepower, data= amerAuto, type = c("p", "smooth"), groups = cylinders ,auto.key = list(columns=5) )
xyplot(mpg ~ horsepower, type = c("p", "smooth"), groups = origin ,auto.key = list(columns=3) )
lm_mH <- lm(mpg ~ horsepower, data = autoData)
lm_mH
summary(lm_mH)
predict(lm_mH, newdata = data.frame(lstat = c(5,10,15)))
predict(lm_mH, newdata = data.frame(horsepower = c(5,10,15)))
predict(lm_mH, newdata = data.frame(horsepower = c(5,10,15,50,100,300,500,1000)))
hp < c(5,10,15,50,100,300,500,1000)
hp <- c(5,10,15,50,100,300,500,1000)
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
pMPG <- predict(lm_mH, newdata = data.frame(horsepower = hp))
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
hp <- c(5,10,15,50,100,150,200,300)
pMPG <- predict(lm_mH, newdata = data.frame(horsepower = hp))
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
hp <- c(1:500)
pMPG <- predict(lm_mH, newdata = data.frame(horsepower = hp))
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
hp <- c(1:500:2)
pMPG <- predict(lm_mH, newdata = data.frame(horsepower = hp))
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
hp <- c(1:500:10)
pMPG <- predict(lm_mH, newdata = data.frame(horsepower = hp))
plot(hp, pMPG, main="HP vs MPG",
xlab="HP", ylab="Miles Per Gallon ", pch=19)
lm_mA <- lm(mpg ~ acceleration, data = autoData)
summary(lm_mA)
ap <- c(1:500:10)
aMPG <- predict(lm_mA, newdata = data.frame(acceleration = ap))
plot(hp, aMPG, main="Acce vs MPG",
xlab="Acc", ylab="Miles Per Gallon ", pch=19)
ap <- c(1:500:20)
pairs(amerAuto[,1:7])
pairs(amerAuto[,1:7])
rm(list = ls())
library(ElemStatLearn)
library(glmnet)  #install.packages("glmnet)
install.packages("glmnet")
library(glmnet)
library(glmnet)
?library(glmnet)
data(prostate)
my_dats <- na.omit(prostate[,1:9])
X <- as.matrix(my_dats[,1:8])
Y <- my_dats[,9]
```{r}
---
title: "R Notebook"
output: html_notebook
---
This is an [R Markdown](http://rmarkdown.rstudio.com) Notebook. When you execute code within the notebook, the results appear beneath the code.
Try executing this chunk by clicking the *Run* button within the chunk or by placing your cursor inside it and pressing *Cmd+Shift+Enter*.
```{r}
plot(cars)
```
Add a new chunk by clicking the *Insert Chunk* button on the toolbar or by pressing *Cmd+Option+I*.
When you save the notebook, an HTML file containing the code and output will be saved alongside it (click the *Preview* button or press *Cmd+Shift+K* to preview the HTML file).
plot(cars)
fb1<-read.csv("FB.csv")
View(fb1)
par(bg="cornsilk")
fb1<-read.csv("FB.csv")
fb1<-read.csv("FB.csv")
getwd()
setwd('/Users/varadtupe/Documents/GitHub/CSE587_DIC/lab1/FB.csv')
setwd('/Users/varadtupe/Documents/GitHub/CSE587_DIC/lab1')
fb1<-read.csv("FB.csv")
source('~/Documents/GitHub/CSE587_DIC/lab1/lb1.R', echo=TRUE)
install.packages('ggmaps')
install.packages('ggmap')
install.packages('maptools')
library("ggmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("ggmap")
library("maptools")
library("maps")
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
map("world", fill=TRUE, col="white", bg="lightblue", ylim=c(-60, 90), mar=c(0,0,0,0))
points(visit.x,visit.y, col="red", pch=36)
visited <- c("SFO", "New York", "Buffalo", "Dallas, TX")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
map("state", fill=TRUE, col=rainbow(50), bg="lightblue", mar=c(0,0,0,0))
points(visit.x,visit.y, col="yellow", pch=36)
stack1Data = melt(part1Data[,1:3],id.vars = 'Week')
plotS1 <- ggplot(stack1Data)
plotS1 +  geom_bar(aes(x=Week,y=value,factor=variable,fill=variable), stat="identity",colour="black") +
scale_fill_manual(values=c("#FFF450","#007E32")) +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$Percent.Positive.A),size=1,col="yellow",lwd=0.5,lty="dashed") +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$Percent.Positive.B),size=1,col="green",lty="dotted") +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$X..Positive),size=1,col="black") +
scale_colour_manual(values=c("yellow","green","black"))+
theme(axis.text.x = element_text(angle = 75, hjust = 1))+
scale_x_discrete(breaks=part1Data$Week,labels = c("201740","201742","201744","201746","201748","201750","201752","201802","201804","201806",
"201808","201810","201812","201814","201816","201818","201820"))+
scale_y_continuous(breaks = round(seq(2000, 18000, by = 1000),1))+
scale_y_continuous(sec.axis = sec_axis(~.*0.0014, name = "Percent Positive",breaks = round(seq(2, 30, by = 2),1)),expand=c(0,0))+
ggtitle("Influenza Positive Tests Reported to CDC by U.S. Clinical Laboratories, \n National Summary, 2017-2018 Season")+
theme(panel.grid.major = element_line(color= NA),
panel.grid.minor = element_line(color= NA)) +
guides(col = guide_legend(ncol = 1)) +
theme(legend.key = element_blank(),
legend.position = "top", legend.title = element_blank(),
legend.box.just = "left")
rm(list = ls())
getwd()
setwd("/Users/varadtupe/Documents/GitHub/CSE587_DIC/lab1/Part2")
library(ggplot2)
library(reshape2)
part1Data = read.csv('1_inf_pos_test.csv',header = T,sep = ',')
part1Data$Week = as.factor(part1Data$Week)
part1Data$Week = as.factor(part1Data$Week)
stack1Data = melt(part1Data[,1:3],id.vars = 'Week')
plotS1 <- ggplot(stack1Data)
plotS1 +  geom_bar(aes(x=Week,y=value,factor=variable,fill=variable), stat="identity",colour="black") +
scale_fill_manual(values=c("#FFF450","#007E32")) +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$Percent.Positive.A),size=1,col="yellow",lwd=0.5,lty="dashed") +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$Percent.Positive.B),size=1,col="green",lty="dotted") +
geom_line(data=part1Data, aes(group=1,x=part1Data$Week,y=700*part1Data$X..Positive),size=1,col="black") +
scale_colour_manual(values=c("yellow","green","black"))+
theme(axis.text.x = element_text(angle = 75, hjust = 1))+
scale_x_discrete(breaks=part1Data$Week,labels = c("201740","201742","201744","201746","201748","201750","201752","201802","201804","201806",
"201808","201810","201812","201814","201816","201818","201820"))+
scale_y_continuous(breaks = round(seq(2000, 18000, by = 1000),1))+
scale_y_continuous(sec.axis = sec_axis(~.*0.0014, name = "Percent Positive",breaks = round(seq(2, 30, by = 2),1)),expand=c(0,0))+
ggtitle("Influenza Positive Tests Reported to CDC by U.S. Clinical Laboratories, \n National Summary, 2017-2018 Season")+
theme(panel.grid.major = element_line(color= NA),
panel.grid.minor = element_line(color= NA)) +
guides(col = guide_legend(ncol = 1)) +
theme(legend.key = element_blank(),
legend.position = "top", legend.title = element_blank(),
legend.box.just = "left")
